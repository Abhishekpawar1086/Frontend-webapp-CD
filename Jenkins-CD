pipeline {
  agent any
    environment {
    GCP_PROJECT_ID = 'final-project-453412'
    GAR_REPO = 'us-central1-docker.pkg.dev/final-project-453412/docker-images'
    KUBE_NAMESPACE = 'frontend-webapp'
    GKE_CLUSTER = 'cluster-1-front-end-web-app'
    GKE_ZONE = 'us-central1'
    // HELM_CHART_PATH = 'path/to/your/helm/chart'   This can be used When You want to Install helm chart from spacific location
}
    stages {
// Cleans the workspace every time you hit a build 
          stage('Clean Workspace') {
                steps {
                      cleanWs() 
                     }
                   }
//clone your repo from git to your jenkins workspace you need to create private token for git and use that token inside jenkins crediantial  
//kind will be username and pass and spacefi any id (ex git token) for it and password will be your token
//you can use pipeline syntex for generating syntax for you 
          stage('Clone Repository') {
                 steps {
                       echo "Cloning repository..."
                       git branch: 'main', credentialsId: 'Jenkins-token', url: 'https://github.com/Abhishekpawar1086/Frontend-webapp-CD.git'
                     }
                   }
//this stage aloows to to authenticate you genkins with GCP in this you need to download the json file of service account which is having all required access. you need to add that file in jenkins crediantial 
//kind will be secret file and provide Any id (ex service-key-file) and add that json file over here
//you can use pipeline syntax to generate synatacs for with crediantial 
//in this stage you need to provide information related to your keyfile through which you can access your gcp variable can be any thing (ex GCP_KEY)
//now below you need to provide the cluster name zone and prject id in which you want to deploy your MS
          stage('Authenticate with GKE') {
                 steps {
                      withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCP_KEY')]) {
                      script {
                        echo "Authenticating with GKE cluster..."
                        sh """
                        gcloud auth activate-service-account --key-file=${GCP_KEY}
                        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${GCP_PROJECT_ID}
                           """
                    }
                  } 
                }
              }
//this stage alows you to deploy your image from artifactory to GKS using helm in values.yaml file we will define the GAR location for our image and we will pass those values in deployment template as a placeholder
//now (frontend-webapp) is release name which you can see by kubectl get secret by ssh ing that k8s cluster  ./ is represting from this directory deploy MS to cluster image_tags is use to define version of image (ex build 2,3,4)
//Now IMAGE_VERSION Is parameterize in Jenkins UI which you will be not able to see in this jenkins file environment veriable. its same like defining variable in this file. but wee will define image version in jenkins for easy roolbacks 
//now inside pipeline>configure>this projectis is paremetrize>string paremiter now IMAGE_VERSION you need to define here as a verable which holds a value of image tag (ex image name <build no>) now wee will define this build no over here to swith to any specific version of image 
//image_tag is just a number that is generate from build tag that we defined in CI pipeline now we just need to define that number as a image_tag Using IMAGE_VERSION as a veriable to install any image from ther (eg 802a348f98ae 43 802a348f98ae 42) 802a348f98ae is image name and 43 is tag
//you can use this parametrize for deploying verious MS In cluster using Single deployment file you jsut need to parametrize every thing in you CD pipeline and by selecting the option you can deploy 
          stage('Deploy to GKE using Helm') {
                steps {
                    script {
                       sh "helm upgrade --install frontend-webapp ./ --set image_tag=${IMAGE_VERSION}"
                    }
                  }
                }
//this stage will give you out put in you jenkins logs about your deployment loke pods detail and service detail
     stage('Verify Deployment') {
                steps {
                    script {
                        // Verify the deployment
                        sh "kubectl get pods -n ${KUBE_NAMESPACE}"
                        sh "kubectl get svc -n ${KUBE_NAMESPACE}"
                  }
                }
              }
            }
          }
